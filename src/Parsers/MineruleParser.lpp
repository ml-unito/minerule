%{

#include "minerule/Parsers/ParsedPredicate.hpp"
#include "minerule/Parsers/HeaderQuery.hpp"
#include "minerule/Parsers/SupportMeasure.hpp"
#include "MineruleParser_parser.hpp"
#include <string.h>
#include "minerule/Utils/Converter.hpp"
#include <sstream>
#include <map>
#include <iostream>

using namespace minerule;


int mrlex();

#define PARSER_BUF_SIZE (1<<14)

char linebuf[PARSER_BUF_SIZE];
int tokenpos=0;
int lastC=0;
char* stringUpperCase(char*);
std::map<std::string,int> keywords_to_token;

void append_to_linebuf(char* str);
%}

%option noinput
%option nounput

KEYWORDS ("MINE"|"RULE"|"AS"|"SELECT"|"DISTINCT"|"BODY"|"HEAD"|"AND"|"OR"|"NOT"|"FROM"|"GROUP"|"BY"|"HAVING"|"EXTRACTING"|"RULES"|"WITH"|"WHERE"|"CLUSTER"|"ITEMSET"|"SUPPORT"|"CONFIDENCE"|"SEQUENCE"|"SEQUENCES"|"ORDER"|"ITEMSETS"|"GAP"|"BETWEEN"|"START"|"BEGIN"|"END"|"MID"|"LIKE"|"IN")
AGGR ("MAX"|"MIN"|"AVG"|"STD"|"SUM")
ATTRNAME  ([a-zA-Z][a-zA-Z0-9_]*)
QUOTED_STRING  (['][^']*['])
SQUARE ("["|"]")
DATE_DEF (\d{1,2}\/\d{1,2}\/\d{4})
TIME_DEF (\d{2}+":"+\d{2}+":"+\d{2})

%%

[ ]+		      {	tokenpos=tokenpos+mrleng;
					append_to_linebuf(mrtext);
		      }

[,"():]               { tokenpos=tokenpos+mrleng;
			append_to_linebuf(mrtext);
			return mrtext[0];
		      }

(<)|(>)|(<=)|(>=)|(<>)|(=)			 {
							tokenpos=tokenpos+mrleng;
							append_to_linebuf(mrtext);
							mrlval.TString=strndup(mrtext,PARSER_BUF_SIZE);
							return(COMPARISON);
                         }
{DATE_DEF}		{
              tokenpos=tokenpos+mrleng;

              append_to_linebuf(mrtext);
              mrlval.TString=strndup(mrtext,PARSER_BUF_SIZE);
              return(DATE_MR);
                }
{TIME_DEF}		{
              tokenpos=tokenpos+mrleng;

              append_to_linebuf(mrtext);
              mrlval.TString=strndup(mrtext,PARSER_BUF_SIZE);
              return(TIME_);
                }

{KEYWORDS}		{
				char* stringUpperCase(char*);
				tokenpos=tokenpos+mrleng;
                                append_to_linebuf(mrtext);
				return keywords_to_token[stringUpperCase(mrtext)];
			}

(-?[1-9][0-9]*|0)		{
			 		tokenpos=tokenpos+mrleng;
			 		append_to_linebuf(mrtext);
					mrlval.TString=strndup(mrtext,PARSER_BUF_SIZE);
			 		return(INT_NUMBER);
 			}

\.\.                    {
				tokenpos=tokenpos+mrleng;
				append_to_linebuf(mrtext);
				return(DOTS);
			 }

\.         {
                tokenpos=tokenpos+mrleng;
                append_to_linebuf(mrtext);
                return(SINGLE_DOT);
             }
{SQUARE}    {
                tokenpos=tokenpos+mrleng;
                append_to_linebuf(mrtext);
                return(SQUARE);
             }
BODY\.{ATTRNAME}              {
				tokenpos=tokenpos+mrleng;
                                append_to_linebuf(mrtext);
				mrlval.TString=strndup(mrtext,PARSER_BUF_SIZE);
				return(PARTBODY);
			}

HEAD\.{ATTRNAME}              {
				tokenpos=tokenpos+mrleng;
                                append_to_linebuf(mrtext);
				mrlval.TString=strndup(mrtext,PARSER_BUF_SIZE);
				return(PARTHEAD);
			}

{AGGR}			 {
                          tokenpos=tokenpos+mrleng;
                          append_to_linebuf(stringUpperCase(mrtext));
                          mrlval.TString=strndup(stringUpperCase(mrtext),PARSER_BUF_SIZE);
                          return(AGGREGATE);
			}


{ATTRNAME}		{
			  tokenpos=tokenpos+mrleng;

			  append_to_linebuf(mrtext);
			  mrlval.TString=strndup(mrtext,PARSER_BUF_SIZE);
			  return(ATTR);
		        }

{QUOTED_STRING}		{
			 if(!lastC) {
				tokenpos=0;
				linebuf[0]='\0';
			 }
			 tokenpos=tokenpos+mrleng;
			 append_to_linebuf(mrtext);
			 mrlval.TString=strndup(mrtext,PARSER_BUF_SIZE);
 			 return(QUOTED_VALUE);
			}


(-?[0-9]+"."[0-9]+)|(-?[0-9]+[e|E]-?[0-9]+)    {	tokenpos=tokenpos+mrleng;
							append_to_linebuf(mrtext);
							mrlval.TString=strndup(mrtext,PARSER_BUF_SIZE);
							return(DBL_NUMBER);
			     }

\n  			{
						if (lastC) {
								tokenpos=tokenpos+mrleng;
								append_to_linebuf(mrtext);
								lastC=0;
								return 0;
						} else {
							 	tokenpos=0;
							 	linebuf[0]='\0';
						}
				}

%%

void append_to_linebuf(char* str) {
	int curlen = strlen(linebuf);
	int charsLeft = PARSER_BUF_SIZE - curlen - 1;
	if( charsLeft < 0) {
		std::cout << "Buffer overflow!" << std::endl;
	}

	if( charsLeft == 0 ) {
		std::cout << "append_to_linebuf: No more space on the buffer..., skipping buffer append!";
	} else {
/*		std::cout << "appending " << strlen(str) << " chars to buffer (chars left:" << charsLeft << " )" << std::endl;*/
		strncat(linebuf, str, charsLeft);
	}
}

void mrerror(char const *s){
	char buf[4096];
	std::stringstream ss;
	ss << s << " at column: " << tokenpos << std::endl << linebuf << std::endl;
	for(int i=0; i<tokenpos+1; ++i)
	   buf[i]=' ';
	buf[tokenpos+1]='\0';
	ss << buf << "^" << std::endl;
	throw MineruleException(MR_ERROR_MINERULETEXT_PARSING, ss.str() );
}

int mrwrap() {
	return 1;
}

//This function converts from very small to capital one world
//received from the lexer
char*
stringUpperCase(char* mrtext) {
  int len=strlen(mrtext);
  for(int i=0;i<len;++i) {
    mrtext[i]=toupper(mrtext[i]);
  }
  return mrtext;
}
