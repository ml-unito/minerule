//   Minerule - a sql-like language for datamining
//   Copyright (C) 2013 Roberto Esposito (esposito@di.unito.it)
//
//   This program is free software: you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, either version 3 of the License, or
//   (at your option) any later version.
//
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
//
//   You should have received a copy of the GNU General Public License
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.
%{
#include <iostream>
#include "minerule/Utils/MineruleException.h"


using namespace minerule;

#define YYSTYPE std::string	
#include "OptionParser_parser.hpp"

// #define LEXDBG(a) a
#define LEXDBG(a)
%}

%option noyywrap
%option noinput
%option nounput

STR [a-zA-Z0-9\.\/\-_]*
COMMSTR .*
  
%%

[ \t\n]*	{/* ignore them */  LEXDBG(cerr << "flex ignoring spaces" <<endl;)}
\".*\"		{
				std::string inStr=OPtext;  
				std::string resStr(inStr, 1, inStr.length()-2);
				OPlval = resStr;
				LEXDBG(cerr << "flex: VALSTRING (" << OPlval <<")"<< endl;)
				return STRING;
			}

{STR}		{ 
				OPlval = OPtext; 
				LEXDBG(cerr << "flex: VALSTRING (" << OPtext <<")"<< endl;)
				return STRING;
			}
\<{STR}\>	{ 
				OPlval = OPtext;
		  	  	LEXDBG(cerr << "flex: VALSTRING (" << OPtext <<")"<< endl;)
		  	  	return STRING;
			}
#{COMMSTR}\n	{
				/* ignore this token */ 
				LEXDBG(cerr <<"flex: commennt ignored" <<endl;)
				}

=			{ 
				LEXDBG(cerr << "flex: EQSIM" <<endl;) 
		  		return EQSIM; 
			}

:: 			{ 
				LEXDBG(cerr << "flex:sep" <<endl;)
		  	  	return NSSEP; 
			}

\{			{ 
				LEXDBG(cerr << "flex:left" << endl;)  	
		  	  	return LEFTBRACE; 
			}

\}			{ 
				LEXDBG(cerr << "flex:right" << endl;) 
		  	  	return RIGHTBRACE; 
			}	

\+           {
				LEXDBG(cerr << "flex:-" << endl;)
				return STARTOPT;
			}

%%

extern int OPparse();

int OPerror(char const* error) {
	throw MineruleException(MR_ERROR_OPTION_PARSING,error);
}

