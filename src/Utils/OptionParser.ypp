//   Minerule - a sql-like language for datamining
//   Copyright (C) 2013 Roberto Esposito (esposito@di.unito.it)
//
//   This program is free software: you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, either version 3 of the License, or
//   (at your option) any later version.
//
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
//
//   You should have received a copy of the GNU General Public License
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.
/* 
  --------------------------------------------------------------------------------
  Minerule Option Parser 	
  --------------------------------------------------------------------------------

  A parser for the minerule option file. Minerule options are defined inside 
  (possibly nested) option namespaces. Each namespace is a subclass of OptionBase.
  Each OptionBase subclass defines the sub-namespace and the options it supports.
  The root namespace is defined in 'MineruleOptions_implementations/root.h'.
  
  The syntax for accessing a namespace is:
	  namespace::
  after a namespace declaration one can instantly declare an option or open a context
  for subsequent operations.
  The syntax for setting an option is:
  	+optionName=optionValue
  Putting both things together:
	  namespace::+optionName=optionValue
  sets option 'optionName' in namespace 'namespace' to the value 'optionValue'.
  Nested namespace are simply appended one to another:
	  ns1::ns2::ns3::option=optionValue
  sets  'option' in namespace ns3 which is a sub-namespace of ns2 which is sub-namespace of ns1.
  
  The parser supports an additional syntax that simplifies setting many options in the
  same namespace:
  namespace::{
	  ....
  }  
  everything in the braces are interpreted in the context of 'namespace'.
  
  *NOTE*
  The syntax namespace1::namespace2::+option=optionValue is meant to be used to set options
  from the command line.
  The syntax 
  	namespace1::{
		namespace2::{
			+option=optionValue
		}
  	}
  is meant for option files. This is important to know because using the first syntax in an option
  file will not work since the parser does *not* support more than one option set using the first
  syntax (this is ok using command line options since a new instance of the parser will be 
  instantiated for each option).
*/

%{
#define YYSTYPE std::string

#include <iostream>
#include "minerule/Utils/OptionParserLib.hpp"


using namespace minerule;

extern int yylex();
extern int yyerror(char const*);

%}

%error-verbose
%locations

%token STRING
%token QUOTEDSTRING
%token EQSIM
%token NSSEP
%token STARTOPT
%token LEFTBRACE
%token RIGHTBRACE

%%

option_list: option option_list
	|option
	;
	
option: STARTOPT STRING EQSIM  STRING  { 
	       setOption($2,$4); 
	   }
	| LEFTBRACE option_list RIGHTBRACE { 
		popOptionClassFromContext();
	   }
    | nsdecl_list option
	;
	
nsdecl: STRING NSSEP { 
	       pushOptionClassIntoContext($1);
	   }
	;
	
nsdecl_list: nsdecl nsdecl_list 
	| nsdecl
	